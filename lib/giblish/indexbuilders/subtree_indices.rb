
require_relative "verbatimtree"

module Giblish
  class SubtreeIndexBase < SubtreeSrcItf
    attr_reader :adoc_source

    def initialize(dst_node)
      @adoc_source = <<~DOC_STR
        #{title}
        #{subtitle(dst_node)}
        #{header}

        #{generation_info}

        #{tree(dst_node)}

        #{document_details(dst_node)}

        #{footer}
      DOC_STR
    end

    protected

    def title
      "= Document index"
    end

    def subtitle(dst_node)
      "from #{dst_node.pathname}"
    end

    def header
      ":icons: font"
    end

    def generation_info
      "*Generated by Giblish at:* #{Time.now.strftime("%Y-%m-%d %H:%M")}"
    end

    def tree(dst_node)
      VerbatimTree.new(dst_node).source
    end

    def add_depgraph_id
      # include link to dependency graph if it exists
      <<~DEPGRAPH_STR
        _A visual graph of document dependencies can be found
        <<./graph.adoc#,here>>
      DEPGRAPH_STR
    end

    def document_details(dst_node)
      details_str = +"== Document details\n\n"

      dst_node.traverse_preorder do |_level, node|
        next unless node.leaf?

        d = node.data
        details_str << (d.converted ? document_detail(d) : document_detail_fail(d))
      end
      details_str
    end

    def footer
      ""
    end

    # return the adoc string for displaying the source file
    def display_source_file(conv_info)
      <<~SRC_FILE_TXT
        Source file::
        #{conv_info.src_node.pathname}
      SRC_FILE_TXT
    end

    private

    # return info about any conversion issues during the
    # asciidoctor conversion
    def conversion_issues(conv_info)
      return "" if conv_info.stderr.empty?

      # extract conversion warnings from asciddoctor std err
      conv_warnings = conv_info.stderr.gsub(/^/, " * ")

      # assemble info to index page
      <<~CONV_INFO
        Conversion issues::

        #{conv_warnings}
      CONV_INFO
    end

    def document_detail_fail(conv_info)
      <<~FAIL_INFO
        === #{conv_info.src_basename}

        #{display_source_file(conv_info)}

        Error detail::
        #{conv_info.error_msg}

        ''''

      FAIL_INFO
    end

    # Show some details about file content
    def document_detail(conv_info)
      <<~DETAIL_SRC
        [[#{Giblish.to_valid_id(conv_info.title.encode("utf-8"))}]]
        === #{conv_info.title.encode("utf-8")}

        #{"Doc id::\n_#{conv_info.docid}_" unless conv_info.docid.nil?}

        #{"Purpose::\n#{conv_info.purpose_str}" unless conv_info.purpose_str.to_s.empty?}

        #{conversion_issues conv_info}

        #{display_source_file(conv_info)}

        '''

      DETAIL_SRC
    end
  end

  # Generates a directory index with history info for all files under the
  # given subdir node.
  class SubtreeIndexGit < SubtreeIndexBase
    # The fixed heading of the table used to display file history
    HISTORY_TABLE_HEADING = <<~HISTORY_HEADER
      File history::
  
      [cols=\"2,3,8\",options=\"header\"]
      |===
      |Date |Author |Message |Sha1
    HISTORY_HEADER

    HISTORY_TABLE_FOOTING = <<~HIST_FOOTER
      
      |===\n\n
    HIST_FOOTER

    def initialize(dst_node)
      super(dst_node)
    end

    def document_detail_fail(conv_info)
      super(conv_info) + <<~FAIL_INFO
        Git stuff here
      FAIL_INFO
    end

    # Show some details about file content
    def document_detail(conv_info)
      s = super(conv_info)

      s + <<~DETAIL_SRC

        Git stuff here 
      DETAIL_SRC
    end

    def generate_history_info(d)
      # Generate table rows of history information
      rows = d.history.collect do |h|
        str << <<~HISTORY_ROW
          |#{h.date.strftime("%Y-%m-%d")}
          |#{h.author}
          |#{h.message}  
          |#{h.sha1}
        HISTORY_ROW
      end.join("\n\n")
      HISTORY_TABLE_HEADING + rows + HISTORY_TABLE_FOOTING
    end
  end
end