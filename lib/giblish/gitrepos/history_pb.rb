module Giblish
  # Adds a 'FileHistory' instance to each file node's data delegator.
  # Users down-the-line can then call node.data.history to receive
  # an Array of HistoryEntry objects.
  class AddHistoryPostBuilder
    def initialize(repo_root)
      @git_itf = Giblish::GitItf.new(repo_root)
    end

    # Called from TreeConverter during post build phase
    def on_postbuild(src_tree, dst_tree, converter)
      dst_tree.traverse_preorder do |level, dst_node|
        next unless dst_node.leaf?

        src_node = dst_node.data.src_node
        next unless src_node.pathname.exist?

        # Get the commit history of the doc as an Array of entries
        file_log = FileHistory.new
        @git_itf.file_log(src_node.pathname.to_s).each do |log_entry|
          file_log.history << FileHistory::LogEntry.new(
            log_entry["date"],
            log_entry["message"],
            log_entry["author"],
            log_entry["sha"]
            )
        end
        dst_node.data.add(file_log)
      end
    end
  end

  class SubtreeIndexGit < SubtreeIndexBase
    # The fixed heading of the table used to display file history
    HISTORY_TABLE_HEADING = <<~HISTORY_HEADER
      File history::
  
      [cols=\"2,3,8\",options=\"header\"]
      |===
      |Date |Author |Message |Sha1
    HISTORY_HEADER

    HISTORY_TABLE_FOOTING = <<~HIST_FOOTER
      
      |===\n\n
    HIST_FOOTER

    def initialize(dst_node)
      super(dst_node)

      @adoc_source = <<~DOC_STR
        #{title}
        #{subtitle(dst_node)}
        #{header}

        #{generation_info}

        #{tree(dst_node)}

        #{document_details(dst_node)}

        #{footer}
      DOC_STR
    end

    def document_details(dst_node)
      details_str = +"== Document details\n\n"

      dst_node.traverse_preorder do |_level, node|
        next unless node.leaf?

        d = node.data
        details_str << (d.converted ? document_detail(d) : document_detail_fail(d))
      end
      details_str
    end

    def generate_header
      t = Time.now
      <<~DOC_HEADER
        = Document index
        #{@git_repo.current_branch}
  
        Generated by Giblish at::
        #{t.strftime("%Y-%m-%d %H:%M")}
  
      DOC_HEADER
    end

    def generate_history_info(d)
      # Generate table rows of history information
      rows = d.history.collect do |h|
        str << <<~HISTORY_ROW
          |#{h.date.strftime("%Y-%m-%d")}
          |#{h.author}
          |#{h.message}  
          |#{h.sha1}
        HISTORY_ROW
      end.join("\n\n")
      HISTORY_TABLE_HEADING + rows + HISTORY_TABLE_FOOTING
    end

    def document_detail(d)
      # Generate detail info
      purpose_str = if d.purpose_str.nil?
        ""
      else
        "Purpose::\n#{d.purpose_str}"
      end
      <<~DETAIL_SRC
        [[#{Giblish.to_valid_id(d.title)}]]
        === #{d.title}
  
        #{purpose_str}
  
        #{generate_conversion_info d}
  
        Source file::
        #{d.src_file}
  
        #{generate_history_info d}
  
        ''''
  
      DETAIL_SRC
    end
  end
end