
module Giblish
  # Builds an asciidoc page with an svg image with a
  # digraph showing how documents reference each other.
  #
  # Graphviz is used as the graph generator and must be available
  # as a valid engine via asciidoctor-diagram for this class to work.
  class GraphBuilderGraphviz

    # the dependency graph relies on graphwiz (dot), check if we can access that
    def self.supported
      return !Giblish.which('dot').nil?
    end

    # Supported options:
    # :extension - file extension for URL links (default is .html)
    def initialize(processed_docs, paths, options = {})

      # this class relies on graphwiz (dot), make sure we can access that
      raise "Could not find the 'dot' tool needed to generate a dependency graph!" unless GraphBuilderGraphviz.supported

      # require asciidoctor module needed for generating diagrams
      require "asciidoctor-diagram/graphviz"

      @noid_docs = {}
      @next_id = 0
      @processed_docs = processed_docs
      @paths = paths
      @options = options.dup
      @extension = options.key?(:extension) ? options[:extension] : "html"
      @docid_cache = DocidCollector.docid_cache
      @docid_deps =  DocidCollector.docid_deps
      @dep_graph = build_dep_graph
    end

    # get the asciidoc source for the document.
    def source
      <<~DOC_STR
        #{generate_header}
        #{generate_labels}
        #{generate_deps}
        #{generate_footer}
      DOC_STR
    end

    private

    # build a hash with {DocInfo => [doc_id array]}
    def build_dep_graph
      result = {}
      @docid_deps.each do |src_file, id_array|
        d = @processed_docs.find do |doc|
          doc.src_file.to_s.eql? src_file
        end
        raise "Inconsistent docs when building graph!! found no match for #{src_file}" if d.nil?
        result[d] = id_array
      end
      result
    end

    def generate_header
      t = Time.now
      <<~DOC_STR
        = Document-id reference graph
        from #{@paths.src_root_abs}

        Generated by Giblish at::
        #{t.strftime('%Y-%m-%d %H:%M')}

        Below is a graph that visualizes what documents (by doc-id) a specific
        document references.

        [graphviz,"docdeps","svg",options="inline"]
        ....
        digraph notebook {
          bgcolor="#33333310"
          node [shape=note,
                fillcolor="#ebf26680",
                style="filled,solid"
              ]
        
        rankdir="LR"

      DOC_STR
    end

    def generate_footer
      <<~DOC_STR
        }
        ....
      DOC_STR
    end

    def make_dot_entry(doc_dict, info)
      dot_entry = if info.doc_id.nil?
                    doc_id = next_fake_id
                    @noid_docs[info] = doc_id
                    "\"#{doc_id}\"[label=\"-\\n#{info.title}\""
                  else
                    doc_id = info.doc_id
                    "\"#{info.doc_id}\"[label=\"#{info.doc_id}\\n#{info.title}\""
                  end
      # add clickable links in the case of html output (this is not supported
      # out-of-the-box for pdf).
      rp = info.rel_path.sub_ext(".#{@extension}")
      case @extension
        when "html"
          dot_entry += ", URL=\"#{rp}\" ]"
        else
          dot_entry += " ]"
      end
      doc_dict[doc_id] = dot_entry
    end

    def generate_labels
      # create an entry in the 'dot' description for each
      # document, sort them according to descending doc id to
      # get them displayed in the opposite order in the graph
      node_dict = {}
      @dep_graph.each_key do |info|
        make_dot_entry node_dict, info
      end
      # sort the nodes by reverse doc id
      node_dict = node_dict.sort.reverse.to_h

      # produce the string with all node entries
      node_str = node_dict.map do |k,v|
        v
      end.join("\n")
      node_str
    end

    def generate_deps
      dep_str = ""
      @dep_graph.each do |info, targets|
        # set either the real or the generated id as source
        src_part = if info.doc_id.nil?
                      "\"#{@noid_docs[info]}\""
                   else
                     "\"#{info.doc_id}\""
                   end

        if targets.length.zero?
          dep_str += "#{src_part}\n"
          next
        end

        dep_str += "#{src_part} -> {" + targets.reduce("") do |acc, target|
          acc + " \"#{target}\""
        end
        # replace last comma with newline
        dep_str += "}\n"
      end
      dep_str
    end

    def next_fake_id
      @next_id += 1
      "_generated_id_#{@next_id.to_s.rjust(4, '0')}"
    end
  end
end
