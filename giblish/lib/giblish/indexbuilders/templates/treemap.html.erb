<!DOCTYPE html>
<head>
  <head>
    <meta charset="utf-8">
    <style>
     html, body {
         padding: 0;
         margin: 0;
         width: 100%;
         height: 100%;
         overflow: hidden;
     }

     text {
         font: 12px sans-serif;
     }

     tspan:last-child {
         font-size: 12px;
         fill-opacity: 0.8;
     }

     .node rect {
         shape-rendering: crispEdges;
     }

     .node--hover rect {
         stroke: #000;
     }

    </style>
    <svg width="100%" height="100%"></svg>
    <script src="http://d3js.org/d3.v4.0.0-alpha.35.min.js"></script>
    <script>

     var svg = d3.select("svg"),
         width = window.innerWidth,
         height = window.innerHeight;

     svg.attr("width", width + "px");
     svg.attr("height", height + "px");

     var format = d3.format(",d");

     var color = d3.scaleMagma()
                   .domain([-4, 4]);

     var treemap = d3.treemap()
                     .size([width, height])
                     .paddingOuter(3)
                     .paddingTop(19)
                     .paddingInner(1)
                     .round(true);


     var data = <%= tree.to_json %>
     var root = d3.hierarchy(data)
                  .sum(function(d) {
                      var value = 1;
                      d.children.forEach(function(i){ value += i.value; })
                      return value;
                  })
                  .sort(function(a, b) { return b.height - a.height || b.value - a.value; })

     var counter = 0;
     root.each(function(d){ d.id = counter++; })
     treemap(root)

     var cell = svg
         .selectAll(".node")
         .data(root.descendants())
         .enter().append("g")
         .attr("transform", function(d) { return "translate(" + d.x0 + "," + d.y0 + ")"; })
         .attr("class", "node")
         .each(function(d) { d.node = this; })
         .on("mouseover", hovered(true))
         .on("mouseout", hovered(false));

     cell.append("rect")
         .attr("id", function(d) { return "rect-" + d.id; })
         .attr("width", function(d) { return d.x1 - d.x0; })
         .attr("height", function(d) { return d.y1 - d.y0; })
         .style("fill", function(d) { return color(d.depth); });

     cell.append("clipPath")
         .attr("id", function(d) { return "clip-" + d.id; })
         .append("use")
         .attr("xlink:href", function(d) { return "#rect-" + d.id + ""; });

     var label = cell.append("text")
                     .attr("clip-path", function(d) { return "url(#clip-" + d.id + ")"; });

     label
         .filter(function(d) { return d.children; })
         .selectAll("tspan")
         .data(function(d) { return [d.data.name]; })
         .enter().append("tspan")
         .attr("x", function(d, i) { return i ? null : 4; })
         .attr("y", 13)
         .text(function(d) { return d; });

     label
         .filter(function(d) { return !d.children; })
         .selectAll("tspan")
         .data(function(d) { return [d.data.name]; })
         .enter().append("tspan")
         .attr("x", 4)
         .attr("y", function(d, i) { return 13 + i * 10; })
         .text(function(d) { return d; });

     cell.append("title")
         .text(function(d) { return d.data.name; });

     function hovered(hover) {
         return function(d) {
             d3.selectAll(d.ancestors().map(function(d) { return d.node; }))
               .classed("node--hover", hover)
               .select("rect")
               .attr("width", function(d) { return d.x1 - d.x0 - hover; })
               .attr("height", function(d) { return d.y1 - d.y0 - hover; });
         };
     }

    </script>
  </head>
  <body></body>
</head>
